{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport { EditorBlock } from 'draft-js';\nimport { resetBlockWithType } from '../../model/index.js';\n\nvar PlaceholderBlock =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PlaceholderBlock, _React$Component);\n\n  function PlaceholderBlock(props) {\n    var _this;\n\n    _classCallCheck(this, PlaceholderBlock);\n\n    _this = _possibleConstructorReturn(this, (PlaceholderBlock.__proto__ || Object.getPrototypeOf(PlaceholderBlock)).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"placeholderText\", function () {\n      //if (this.state.enabled) {\n      //  return \"\"\n      //}\n      return _this.props.blockProps.data.toJS().placeholder || _this.placeholderFromProps() || _this.defaultText();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"placeholderFromProps\", function () {\n      return _this.props.block.toJS().placeholder;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"defaultText\", function () {\n      return \"write something \";\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"placeholderRender\", function () {\n      if (_this.props.block.text.length === 0) {\n        return React.createElement(\"div\", {\n          className: \"public-DraftEditorPlaceholder-root\"\n        }, React.createElement(\"div\", {\n          className: \"public-DraftEditorPlaceholder-inner\"\n        }, _this.placeholderText()));\n      }\n    });\n\n    _this.state = {\n      enabled: false,\n      data: _this.props.blockProps.data.toJS()\n    };\n    return _this;\n  }\n\n  _createClass(PlaceholderBlock, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"span\", {\n        onMouseDown: this.handleFocus\n      }, this.placeholderRender(), React.createElement(EditorBlock, Object.assign({}, this.props, {\n        \"className\": \"imageCaption\",\n        \"placeholder\": \"escrive alalal\"\n      })));\n    }\n  }]);\n\n  return PlaceholderBlock;\n}(React.Component);\n\nexport { PlaceholderBlock as default };\nexport var PlaceholderBlockConfig = function PlaceholderBlockConfig() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var config = {\n    renderable: true,\n    editable: true,\n    block: PlaceholderBlock,\n    type: 'placeholder',\n    wrapper_class: \"is-embedable\",\n    breakOnContinuous: true,\n    selected_class: \"is-selected is-mediaFocused\",\n    widget_options: {\n      displayOnInlineTooltip: false\n    },\n    handleEnterWithoutText: function handleEnterWithoutText(ctx, block) {\n      var editorState = ctx.state.editorState;\n      return ctx.onChange(resetBlockWithType(editorState, \"unstyled\"));\n    },\n    handleEnterWithText: function handleEnterWithText(ctx, block) {\n      var editorState = ctx.state.editorState;\n      var data = {\n        provisory_text: block.getText(),\n        endpoint: block.getData().get('endpoint'),\n        type: block.getData().get('type')\n      };\n      return ctx.onChange(resetBlockWithType(editorState, data.type, data));\n    }\n  };\n  return Object.assign(config, options);\n};","map":null,"metadata":{},"sourceType":"module"}