{"ast":null,"code":"import _classCallCheck from \"/Users/kwanj-k/sims/ah-the-unsullied-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kwanj-k/sims/ah-the-unsullied-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kwanj-k/sims/ah-the-unsullied-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kwanj-k/sims/ah-the-unsullied-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kwanj-k/sims/ah-the-unsullied-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kwanj-k/sims/ah-the-unsullied-frontend/src/components/articles/createArticle/index.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Button } from 'react-materialize';\nimport Dante from 'Dante2';\nimport { PlaceholderBlockConfig } from 'Dante2/package/es/components/blocks/placeholder';\nimport { saveArticle } from '../../../actions/createArticleActions';\n\nvar CreateArticle =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CreateArticle, _Component);\n\n  function CreateArticle(props) {\n    var _this;\n\n    _classCallCheck(this, CreateArticle);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CreateArticle).call(this, props));\n    _this.state = {\n      article: {\n        title: '',\n        body: '',\n        description: '',\n        slug: '',\n        tags: [],\n        published: false\n      },\n      errors: {},\n      chosenImage: ''\n    };\n    return _this;\n  } //   onImageChange = (image) => {\n  //     this.setState({ chosenImage: image });\n  //     const { article } = this.state;\n  //     this.setState({ article: { ...article, image } });\n  //   }\n  // //   onImageChange = (image) => {\n  // //     this.setState({ chosenImage: image });\n  // //     const { article } = this.state;\n  // //     this.setState({ article: { ...article, image } });\n  // //     }\n  //   getImages = () => {\n  //     const images = [];\n  //     if (this.editor) {\n  //       const { blocks } = this.getEditorContent();\n  //       for (let i = 0; i < blocks.length; i += 1) {\n  //         let image = null;\n  //         if (blocks[i].type === 'image') {\n  //           const { data: { url } } = blocks[i];\n  //           image = url;\n  //         } else if (blocks[i].type === 'video') {\n  //           const { thumbnail_url: thumbNail } = JSON.parse(\n  //             JSON.stringify(blocks[i].data.embed_data),\n  //           );\n  //           image = thumbNail;\n  //         }\n  //         if (image) {\n  //           images.push(image);\n  //         }\n  //       }\n  //     }\n  //     return images;\n  //   };\n  //   getEditorContent = () => this.editor.editor.emitSerializedOutput();\n  //   publishArticle = () => {\n  //     const { article } = this.state.article;\n  //     const { saveArticle } = this.props;\n  //     //console.log(article)\n  //     saveArticle({ ...article})\n  //   };\n  //   handleUpload = e => {\n  //     const selectFile = e.target.files[0];\n  //     ImageUploader({ image: selectFile }).then((res) =>{\n  //         console.log(res)\n  //       this.setState({\n  //         image: res.data.secure_url\n  //       })\n  //     }\n  //     );\n  //   };\n  // handleUpload = (file, state) => {\n  //     upload({\n  //       body: file,\n  //       progress: (e) => {\n  //         state.updateProgressBar(e);\n  //       },\n  //     })\n  //       .then((data) => {\n  //         state.uploadCompleted(data.secure_url);\n  //       });\n  //   };\n\n\n  _createClass(CreateArticle, [{\n    key: \"render\",\n    value: function render() {\n      //console.log(this.props)\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }), React.createElement(Dante, {\n        onChange: function onChange(editor) {\n          console.log('editor content: ', editor.emitSerializedOutput());\n        },\n        widgets: [PlaceholderBlockConfig()],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClick: this.publishArticle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"PUBLISH\"));\n    }\n  }]);\n\n  return CreateArticle;\n}(Component);\n\nCreateArticle.propTypes = {\n  saveArticle: PropTypes.func.isRequired //errors: PropTypes.object.isRequired,\n  //editorState: PropTypes.shape({}),\n\n}; // CreateArticle.defaultProps = {\n//     editorState: PropTypes.shape({}),\n// }\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    article: state.article,\n    errors: state.errors\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, {\n  saveArticle: saveArticle\n})(CreateArticle));","map":{"version":3,"sources":["/Users/kwanj-k/sims/ah-the-unsullied-frontend/src/components/articles/createArticle/index.js"],"names":["React","Component","connect","withRouter","PropTypes","Button","Dante","PlaceholderBlockConfig","saveArticle","CreateArticle","props","state","article","title","body","description","slug","tags","published","errors","chosenImage","editor","console","log","emitSerializedOutput","publishArticle","propTypes","func","isRequired","mapStateToProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,OAAOC,KAAP,MAAkB,QAAlB;AACA,SAASC,sBAAT,QAAuC,iDAAvC;AACA,SAASC,WAAT,QAA4B,uCAA5B;;IAGMC,a;;;;;AACJ,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,uFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE;AACPC,QAAAA,KAAK,EAAE,EADA;AACIC,QAAAA,IAAI,EAAE,EADV;AACcC,QAAAA,WAAW,EAAE,EAD3B;AAC+BC,QAAAA,IAAI,EAAE,EADrC;AACyCC,QAAAA,IAAI,EAAE,EAD/C;AACmDC,QAAAA,SAAS,EAAE;AAD9D,OADA;AAITC,MAAAA,MAAM,EAAE,EAJC;AAKTC,MAAAA,WAAW,EAAE;AALJ,KAAb;AAFiB;AASlB,G,CACH;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;6BAGW;AACL;AACF,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH,EAEG;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFH,EAGE,oBAAC,KAAD;AACI,QAAA,QAAQ,EAAE,kBAAAC,MAAM,EAAI;AAAEC,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,MAAM,CAACG,oBAAP,EAAhC;AAAgE,SAD1F;AAEI,QAAA,OAAO,EAAE,CACLjB,sBAAsB,EADjB,CAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,EAUE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAG,KAAKkB,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAVF,CADF;AAcD;;;;EAjGyBxB,S;;AAoG5BQ,aAAa,CAACiB,SAAd,GAA0B;AACtBlB,EAAAA,WAAW,EAAEJ,SAAS,CAACuB,IAAV,CAAeC,UADN,CAEtB;AACA;;AAHsB,CAA1B,C,CAKA;AACA;AACA;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAlB,KAAK;AAAA,SAAK;AAC9BC,IAAAA,OAAO,EAAED,KAAK,CAACC,OADe;AAE9BO,IAAAA,MAAM,EAAER,KAAK,CAACQ;AAFgB,GAAL;AAAA,CAA7B;;AAKE,eAAehB,UAAU,CACvBD,OAAO,CACL2B,eADK,EAEL;AAAErB,EAAAA,WAAW,EAAXA;AAAF,CAFK,CAAP,CAGEC,aAHF,CADuB,CAAzB","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Button } from 'react-materialize';\nimport Dante from 'Dante2';\nimport { PlaceholderBlockConfig } from 'Dante2/package/es/components/blocks/placeholder';\nimport { saveArticle } from '../../../actions/createArticleActions';\n\n\nclass CreateArticle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        article: {\n          title: '', body: '', description: '', slug: '', tags: [], published: false,\n        },\n        errors: {},\n        chosenImage: '',\n      };\n  }\n//   onImageChange = (image) => {\n//     this.setState({ chosenImage: image });\n//     const { article } = this.state;\n//     this.setState({ article: { ...article, image } });\n//   }\n\n// //   onImageChange = (image) => {\n// //     this.setState({ chosenImage: image });\n// //     const { article } = this.state;\n// //     this.setState({ article: { ...article, image } });\n// //     }\n  \n\n//   getImages = () => {\n//     const images = [];\n//     if (this.editor) {\n//       const { blocks } = this.getEditorContent();\n\n//       for (let i = 0; i < blocks.length; i += 1) {\n//         let image = null;\n//         if (blocks[i].type === 'image') {\n//           const { data: { url } } = blocks[i];\n//           image = url;\n//         } else if (blocks[i].type === 'video') {\n//           const { thumbnail_url: thumbNail } = JSON.parse(\n//             JSON.stringify(blocks[i].data.embed_data),\n//           );\n//           image = thumbNail;\n//         }\n\n//         if (image) {\n//           images.push(image);\n//         }\n//       }\n//     }\n//     return images;\n//   };\n\n//   getEditorContent = () => this.editor.editor.emitSerializedOutput();\n\n//   publishArticle = () => {\n//     const { article } = this.state.article;\n//     const { saveArticle } = this.props;\n//     //console.log(article)\n//     saveArticle({ ...article})\n//   };\n//   handleUpload = e => {\n//     const selectFile = e.target.files[0];\n//     ImageUploader({ image: selectFile }).then((res) =>{\n//         console.log(res)\n//       this.setState({\n//         image: res.data.secure_url\n//       })\n//     }\n//     );\n//   };\n\n// handleUpload = (file, state) => {\n//     upload({\n//       body: file,\n//       progress: (e) => {\n//         state.updateProgressBar(e);\n//       },\n//     })\n//       .then((data) => {\n//         state.uploadCompleted(data.secure_url);\n//       });\n//   };\n\n\n  render() {\n      //console.log(this.props)\n    return (\n      <div >\n         <input type='text' placeholder='Title'/>\n         <input type='text' placeholder='Title'/>\n        <Dante\n            onChange={editor => { console.log('editor content: ', editor.emitSerializedOutput()) }}\n            widgets={[\n                PlaceholderBlockConfig(),\n            ]}\n          \n        />\n        <Button onClick={ this.publishArticle}>PUBLISH</Button>\n      </div>\n    );\n  }\n}\n\nCreateArticle.propTypes = {\n    saveArticle: PropTypes.func.isRequired,\n    //errors: PropTypes.object.isRequired,\n    //editorState: PropTypes.shape({}),\n  };\n// CreateArticle.defaultProps = {\n//     editorState: PropTypes.shape({}),\n// }\nconst mapStateToProps = state => ({\n    article: state.article,\n    errors: state.errors\n  });\n\n  export default withRouter(\n    connect(\n      mapStateToProps,\n      { saveArticle }\n    )(CreateArticle)\n  );\n"]},"metadata":{},"sourceType":"module"}