{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport { EditorBlock, EditorState } from 'draft-js';\nimport axios from \"axios\";\nimport { updateDataOfBlock, addNewBlockAt } from '../../model/index.js';\nimport { image } from \"../icons.js\";\n\nvar ImageBlock =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ImageBlock, _React$Component);\n\n  function ImageBlock(props) {\n    var _this;\n\n    _classCallCheck(this, ImageBlock);\n\n    _this = _possibleConstructorReturn(this, (ImageBlock.__proto__ || Object.getPrototypeOf(ImageBlock)).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"blockPropsSrc\", function () {\n      return _this.props.blockProps.data.src;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"defaultUrl\", function (data) {\n      if (data.url) {\n        return data.url;\n      }\n\n      if (data.url) {\n        if (data.file) {\n          return URL.createObjectURL(data.file);\n        } else {\n          return data.url;\n        }\n      } else {\n        return _this.props.blockProps.data.src;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"defaultPlaceholder\", function () {\n      return _this.props.blockProps.config.image_caption_placeholder;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"defaultAspectRatio\", function (data) {\n      if (data.aspect_ratio) {\n        return {\n          width: data.aspect_ratio['width'],\n          height: data.aspect_ratio['height'],\n          ratio: data.aspect_ratio['ratio']\n        };\n      } else {\n        return {\n          width: 0,\n          height: 0,\n          ratio: 100\n        };\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getAspectRatio\", function (w, h) {\n      var maxWidth = 1000;\n      var maxHeight = 1000;\n      var ratio = 0;\n      var width = w; // Current image width\n\n      var height = h; // Current image height\n      // Check if the current width is larger than the max\n\n      if (width > maxWidth) {\n        ratio = maxWidth / width; // get ratio for scaling image\n\n        height = height * ratio; // Reset height to match scaled image\n\n        width = width * ratio; // Reset width to match scaled image\n        // Check if current height is larger than max\n      } else if (height > maxHeight) {\n        ratio = maxHeight / height; // get ratio for scaling image\n\n        width = width * ratio; // Reset width to match scaled image\n\n        height = height * ratio; // Reset height to match scaled image\n      }\n\n      var fill_ratio = height / width * 100;\n      var result = {\n        width: width,\n        height: height,\n        ratio: fill_ratio // console.log result\n\n      };\n      return result;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateData\", function () {\n      var _this$props = _this.props,\n          blockProps = _this$props.blockProps,\n          block = _this$props.block;\n      var getEditorState = blockProps.getEditorState;\n      var setEditorState = blockProps.setEditorState;\n      var data = block.getData();\n      var newData = data.merge(_this.state).merge({\n        forceUpload: false\n      });\n      return setEditorState(updateDataOfBlock(getEditorState(), block, newData));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"replaceImg\", function () {\n      _this.img = new Image();\n      _this.img.src = _this.refs.image_tag.src;\n\n      _this.setState({\n        url: _this.img.src\n      });\n\n      var self = _assertThisInitialized(_this); // exit only when not blob and not forceUload\n\n\n      if (!_this.img.src.includes(\"blob:\") && !_this.props.block.data.get(\"forceUpload\")) {\n        return;\n      }\n\n      return _this.img.onload = function () {\n        _this.setState({\n          width: _this.img.width,\n          height: _this.img.height,\n          aspect_ratio: self.getAspectRatio(_this.img.width, _this.img.height)\n        });\n\n        return _this.handleUpload();\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"startLoader\", function () {\n      return _this.setState({\n        loading: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"stopLoader\", function () {\n      return _this.setState({\n        loading: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleUpload\", function () {\n      _this.startLoader();\n\n      _this.updateData();\n\n      return _this.uploadFile();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"aspectRatio\", function () {\n      return {\n        maxWidth: \"\".concat(_this.state.aspect_ratio.width),\n        maxHeight: \"\".concat(_this.state.aspect_ratio.height),\n        ratio: \"\".concat(_this.state.aspect_ratio.height)\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateDataSelection\", function () {\n      var _this$props$blockProp = _this.props.blockProps,\n          getEditorState = _this$props$blockProp.getEditorState,\n          setEditorState = _this$props$blockProp.setEditorState;\n      var newselection = getEditorState().getSelection().merge({\n        anchorKey: _this.props.block.getKey(),\n        focusKey: _this.props.block.getKey()\n      });\n      return setEditorState(EditorState.forceSelection(getEditorState(), newselection));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleGrafFigureSelectImg\", function (e) {\n      e.preventDefault();\n      return _this.setState({\n        selected: true\n      }, _this.updateDataSelection);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"coords\", function () {\n      return {\n        maxWidth: \"\".concat(_this.state.aspect_ratio.width, \"px\"),\n        maxHeight: \"\".concat(_this.state.aspect_ratio.height, \"px\")\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getBase64Image\", function (img) {\n      var canvas = document.createElement(\"canvas\");\n      canvas.width = img.width;\n      canvas.height = img.height;\n      var ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(img, 0, 0);\n      var dataURL = canvas.toDataURL(\"image/png\");\n      return dataURL;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"formatData\", function () {\n      var formData = new FormData();\n\n      if (_this.file) {\n        var formName = _this.config.upload_formName || 'file';\n        formData.append(formName, _this.file);\n        return formData;\n      } else {\n        formData.append('url', _this.props.blockProps.data.get(\"url\"));\n        return formData;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getUploadUrl\", function () {\n      var url = _this.config.upload_url;\n\n      if (typeof url === \"function\") {\n        return url();\n      } else {\n        return url;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"uploadFile\", function () {\n      // custom upload handler\n      if (_this.config.upload_handler) {\n        return _this.config.upload_handler(_this.formatData().get('file'), _assertThisInitialized(_this));\n      }\n\n      if (!_this.config.upload_url) {\n        _this.stopLoader();\n\n        return;\n      }\n\n      _this.props.blockProps.addLock();\n\n      axios({\n        method: 'post',\n        url: _this.getUploadUrl(),\n        headers: _this.getUploadHeaders(),\n        data: _this.formatData(),\n        onUploadProgress: function onUploadProgress(e) {\n          return _this.updateProgressBar(e);\n        }\n      }).then(function (result) {\n        _this.uploadCompleted(result.data.url);\n\n        if (_this.config.upload_callback) {\n          return _this.config.upload_callback(result, _assertThisInitialized(_this));\n        }\n      }).catch(function (error) {\n        _this.uploadFailed();\n\n        console.log(\"ERROR: got error uploading file \".concat(error));\n\n        if (_this.config.upload_error_callback) {\n          return _this.config.upload_error_callback(error, _assertThisInitialized(_this));\n        }\n      });\n      return function (json_response) {\n        return _this.uploadCompleted(json_response.url);\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"uploadFailed\", function () {\n      _this.props.blockProps.removeLock();\n\n      _this.stopLoader();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"placeHolderEnabled\", function () {\n      return _this.state.enabled || _this.props.block.getText();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"placeholderText\", function () {\n      return _this.config.image_caption_placeholder || 'caption here (optional)';\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"render\", function () {\n      return React.createElement(\"div\", {\n        ref: \"image_tag2\",\n        suppressContentEditableWarning: true\n      }, React.createElement(\"div\", {\n        className: \"aspectRatioPlaceholder is-locked\",\n        style: _this.coords(),\n        onClick: _this.handleGrafFigureSelectImg\n      }, React.createElement(\"div\", {\n        style: {\n          paddingBottom: \"\".concat(_this.state.aspect_ratio.ratio, \"%\")\n        },\n        className: \"aspect-ratio-fill\"\n      }), React.createElement(\"img\", {\n        src: _this.state.url,\n        ref: \"image_tag\",\n        height: _this.state.aspect_ratio.height,\n        width: _this.state.aspect_ratio.width,\n        className: \"graf-image\",\n        contentEditable: false,\n        alt: _this.state.url\n      }), React.createElement(Loader, {\n        toggle: _this.state.loading,\n        progress: _this.state.loading_progress\n      })), React.createElement(\"figcaption\", {\n        className: \"imageCaption\",\n        onMouseDown: _this.handleFocus\n      }, _this.props.block.getText().length === 0 ? React.createElement(\"span\", {\n        className: \"danteDefaultPlaceholder\"\n      }, _this.placeholderText()) : undefined, React.createElement(EditorBlock, Object.assign({}, _this.props, {\n        \"editable\": true,\n        \"className\": \"imageCaption\"\n      }))));\n    });\n\n    var existing_data = _this.props.block.getData().toJS();\n\n    _this.config = _this.props.blockProps.config;\n    _this.file = _this.props.blockProps.data.get('file');\n    _this.state = {\n      loading: false,\n      selected: false,\n      loading_progress: 0,\n      caption: _this.defaultPlaceholder(),\n      direction: existing_data.direction || \"center\",\n      width: 0,\n      height: 0,\n      file: null,\n      url: _this.blockPropsSrc() || _this.defaultUrl(existing_data),\n      aspect_ratio: _this.defaultAspectRatio(existing_data)\n    };\n    return _this;\n  }\n\n  _createClass(ImageBlock, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return this.replaceImg();\n    }\n  }, {\n    key: \"componentWillUnMount\",\n    value: function componentWillUnMount() {//debugger\n    }\n  }, {\n    key: \"getUploadHeaders\",\n    value: function getUploadHeaders() {\n      return this.config.upload_headers || {};\n    }\n  }, {\n    key: \"uploadCompleted\",\n    value: function uploadCompleted(url) {\n      this.setState({\n        url: url\n      }, this.updateData);\n      this.props.blockProps.removeLock();\n      this.stopLoader();\n      this.file = null;\n    }\n  }, {\n    key: \"updateProgressBar\",\n    value: function updateProgressBar(e) {\n      var complete = this.state.loading_progress;\n\n      if (e.lengthComputable) {\n        complete = e.loaded / e.total * 100;\n        complete = complete != null ? complete : {\n          complete: 0\n        };\n        this.setState({\n          loading_progress: complete\n        });\n        return console.log(\"complete: \".concat(complete));\n      }\n    }\n  }, {\n    key: \"handleFocus\",\n    value: function handleFocus(e) {}\n  }]);\n\n  return ImageBlock;\n}(React.Component);\n\nexport { ImageBlock as default };\n\nvar Loader =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(Loader, _React$Component2);\n\n  function Loader() {\n    var _ref;\n\n    var _this2;\n\n    _classCallCheck(this, Loader);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this2 = _possibleConstructorReturn(this, (_ref = Loader.__proto__ || Object.getPrototypeOf(Loader)).call.apply(_ref, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this2), \"render\", function () {\n      return React.createElement(\"div\", null, _this2.props.toggle ? React.createElement(\"div\", {\n        className: \"image-upoader-loader\"\n      }, React.createElement(\"p\", null, _this2.props.progress === 100 ? \"processing image...\" : React.createElement(\"span\", null, React.createElement(\"span\", null, \"loading\"), \" \", Math.round(_this2.props.progress)))) : undefined);\n    });\n\n    return _this2;\n  }\n\n  return Loader;\n}(React.Component);\n\nexport var ImageBlockConfig = function ImageBlockConfig() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var config = {\n    title: 'add an image',\n    type: 'image',\n    icon: image,\n    block: ImageBlock,\n    editable: true,\n    renderable: true,\n    breakOnContinuous: true,\n    wrapper_class: \"graf graf--figure\",\n    selected_class: \"is-selected is-mediaFocused\",\n    selectedFn: function selectedFn(block) {\n      var _block$getData$toJS = block.getData().toJS(),\n          direction = _block$getData$toJS.direction;\n\n      switch (direction) {\n        case \"left\":\n          return \"graf--layoutOutsetLeft\";\n\n        case \"center\":\n          return \"\";\n\n        case \"wide\":\n          return \"sectionLayout--fullWidth\";\n\n        case \"fill\":\n          return \"graf--layoutFillWidth\";\n\n        default:\n          return \"\";\n      }\n    },\n    handleEnterWithoutText: function handleEnterWithoutText(ctx, block) {\n      var editorState = ctx.state.editorState;\n      return ctx.onChange(addNewBlockAt(editorState, block.getKey()));\n    },\n    handleEnterWithText: function handleEnterWithText(ctx, block) {\n      var editorState = ctx.state.editorState;\n      return ctx.onChange(addNewBlockAt(editorState, block.getKey()));\n    },\n    widget_options: {\n      displayOnInlineTooltip: true,\n      insertion: \"upload\",\n      insert_block: \"image\"\n    },\n    options: {\n      upload_url: '',\n      upload_headers: null,\n      upload_formName: \"file\",\n      upload_callback: null,\n      upload_error_callback: null,\n      delete_block_callback: null,\n      image_caption_placeholder: \"type a caption (optional)\"\n    }\n  };\n  return Object.assign(config, options);\n};","map":null,"metadata":{},"sourceType":"module"}