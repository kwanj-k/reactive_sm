{"ast":null,"code":"var Immutable = require('immutable');\n\nvar KEY_SEPARATOR = '-';\n\nfunction MultiDecorator(decorators) {\n  this.decorators = Immutable.List(decorators);\n}\n/**\n    Return list of decoration IDs per character\n\n    @param {ContentBlock}\n    @return {List<String>}\n*/\n\n\nMultiDecorator.prototype.getDecorations = function (block) {\n  var decorations = Array(block.getText().length).fill(null);\n  this.decorators.forEach(function (decorator, i) {\n    var _decorations = decorator.getDecorations(block);\n\n    _decorations.forEach(function (key, offset) {\n      if (!key) {\n        return;\n      }\n\n      key = i + KEY_SEPARATOR + key;\n      decorations[offset] = key;\n    });\n  });\n  return Immutable.List(decorations);\n};\n/**\n    Return component to render a decoration\n\n    @param {String}\n    @return {Function}\n*/\n\n\nMultiDecorator.prototype.getComponentForKey = function (key) {\n  var decorator = this.getDecoratorForKey(key);\n  return decorator.getComponentForKey(this.getInnerKey(key));\n};\n/**\n    Return props to render a decoration\n\n    @param {String}\n    @return {Object}\n*/\n\n\nMultiDecorator.prototype.getPropsForKey = function (key) {\n  var decorator = this.getDecoratorForKey(key);\n  return decorator.getPropsForKey(this.getInnerKey(key));\n};\n/**\n    Return a decorator for a specific key\n\n    @param {String}\n    @return {Decorator}\n*/\n\n\nMultiDecorator.prototype.getDecoratorForKey = function (key) {\n  var parts = key.split(KEY_SEPARATOR);\n  var index = Number(parts[0]);\n  return this.decorators.get(index);\n};\n/**\n    Return inner key for a decorator\n\n    @param {String}\n    @return {String}\n*/\n\n\nMultiDecorator.prototype.getInnerKey = function (key) {\n  var parts = key.split(KEY_SEPARATOR);\n  return parts.slice(1).join(KEY_SEPARATOR);\n};\n\nmodule.exports = MultiDecorator;","map":null,"metadata":{},"sourceType":"script"}