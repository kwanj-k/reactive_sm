{"ast":null,"code":"import { toast } from 'react-toastify';\nimport setAuthToken from '../utils/setAuthToken';\nimport axiosConfig from '../axiosConfig';\nimport { GET_ERRORS, SET_CURRENT_USER } from './actionTypes'; // Login - Get User Token\n\nexport var loginUser = function loginUser(userData) {\n  return function (dispatch) {\n    var formatData = {\n      user: userData\n    };\n    axiosConfig.request({\n      method: 'post',\n      url: 'users/login/',\n      data: formatData\n    }).then(function (res) {\n      // Save to localStorage\n      var token = res['data']['user'].token;\n      localStorage.setItem('jwtToken', token); // Set token to Auth header\n\n      setAuthToken(token); // Decode token to get user data\n\n      var decoded = res.data.user; // Set current user\n\n      document.getElementById('foo').style.display = 'none';\n      toast.success('Welcome ' + decoded.email, {\n        autoClose: 10000\n      });\n      dispatch({\n        type: SET_CURRENT_USER,\n        payload: decoded\n      });\n    }).catch(function (err) {\n      toast.error(err.response.data.errors.error[0]);\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Set logged in user\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\nexport var logoutUser = function logoutUser() {\n  return function (dispatch) {\n    // Remove token from localStorage\n    localStorage.removeItem('jwtToken'); // Remove auth header for future requests\n\n    setAuthToken(false); // Set current user to {} which will set isAuthenticated to false\n\n    dispatch(setCurrentUser({}));\n  };\n};","map":{"version":3,"sources":["/Users/kwanj-k/sims/ah-the-unsullied-frontend/src/actions/loginActions.js"],"names":["toast","setAuthToken","axiosConfig","GET_ERRORS","SET_CURRENT_USER","loginUser","userData","dispatch","formatData","user","request","method","url","data","then","res","token","localStorage","setItem","decoded","document","getElementById","style","display","success","email","autoClose","type","payload","catch","err","error","response","errors","setCurrentUser","logoutUser","removeItem"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,eAA7C,C,CAEA;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,QAAQ;AAAA,SAAI,UAAAC,QAAQ,EAAI;AAC/C,QAAMC,UAAU,GAAG;AACjBC,MAAAA,IAAI,EAAEH;AADW,KAAnB;AAGAJ,IAAAA,WAAW,CACRQ,OADH,CACW;AACPC,MAAAA,MAAM,EAAE,MADD;AAEPC,MAAAA,GAAG,EAAE,cAFE;AAGPC,MAAAA,IAAI,EAAEL;AAHC,KADX,EAMGM,IANH,CAMQ,UAAAC,GAAG,EAAI;AACX;AADW,UAEHC,KAFG,GAEOD,GAAG,CAAC,MAAD,CAAH,CAAY,MAAZ,CAFP,CAEHC,KAFG;AAGXC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAHW,CAIX;;AACAf,MAAAA,YAAY,CAACe,KAAD,CAAZ,CALW,CAMX;;AACA,UAAMG,OAAO,GAAGJ,GAAG,CAACF,IAAJ,CAASJ,IAAzB,CAPW,CAQX;;AACAW,MAAAA,QAAQ,CAACC,cAAT,CAAwB,KAAxB,EAA+BC,KAA/B,CAAqCC,OAArC,GAA+C,MAA/C;AACAvB,MAAAA,KAAK,CAACwB,OAAN,CAAc,aAAaL,OAAO,CAACM,KAAnC,EAA0C;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAA1C;AACAnB,MAAAA,QAAQ,CAAC;AACPoB,QAAAA,IAAI,EAAEvB,gBADC;AAEPwB,QAAAA,OAAO,EAAET;AAFF,OAAD,CAAR;AAID,KArBH,EAsBGU,KAtBH,CAsBS,UAAAC,GAAG,EAAI;AACZ9B,MAAAA,KAAK,CAAC+B,KAAN,CAAYD,GAAG,CAACE,QAAJ,CAAanB,IAAb,CAAkBoB,MAAlB,CAAyBF,KAAzB,CAA+B,CAA/B,CAAZ;AACAxB,MAAAA,QAAQ,CAAC;AACPoB,QAAAA,IAAI,EAAExB,UADC;AAEPyB,QAAAA,OAAO,EAAEE,GAAG,CAACE,QAAJ,CAAanB;AAFf,OAAD,CAAR;AAID,KA5BH;AA6BD,GAjCgC;AAAA,CAA1B,C,CAmCP;;AACA,OAAO,IAAMqB,cAAc,GAAG,SAAjBA,cAAiB,CAAAf,OAAO,EAAI;AACvC,SAAO;AACLQ,IAAAA,IAAI,EAAEvB,gBADD;AAELwB,IAAAA,OAAO,EAAET;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMgB,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAA5B,QAAQ,EAAI;AAC1C;AACAU,IAAAA,YAAY,CAACmB,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACAnC,IAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAK1C;;AACAM,IAAAA,QAAQ,CAAC2B,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,GAPyB;AAAA,CAAnB","sourcesContent":["import { toast } from 'react-toastify';\nimport setAuthToken from '../utils/setAuthToken';\n\nimport axiosConfig from '../axiosConfig';\nimport { GET_ERRORS, SET_CURRENT_USER } from './actionTypes';\n\n// Login - Get User Token\nexport const loginUser = userData => dispatch => {\n  const formatData = {\n    user: userData\n  };\n  axiosConfig\n    .request({\n      method: 'post',\n      url: 'users/login/',\n      data: formatData\n    })\n    .then(res => {\n      // Save to localStorage\n      const { token } = res['data']['user'];\n      localStorage.setItem('jwtToken', token);\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = res.data.user;\n      // Set current user\n      document.getElementById('foo').style.display = 'none';\n      toast.success('Welcome ' + decoded.email, { autoClose: 10000 });\n      dispatch({\n        type: SET_CURRENT_USER,\n        payload: decoded\n      });\n    })\n    .catch(err => {\n      toast.error(err.response.data.errors.error[0]);\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from localStorage\n  localStorage.removeItem('jwtToken');\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};\n"]},"metadata":{},"sourceType":"module"}