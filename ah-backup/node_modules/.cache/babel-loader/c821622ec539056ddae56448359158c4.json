{"ast":null,"code":"var Immutable = require('immutable');\n\nvar PrismOptions = require('./options');\n\nvar KEY_SEPARATOR = '-';\n\nfunction PrismDecorator(options) {\n  this.options = PrismOptions(options || {});\n  this.highlighted = {};\n}\n/**\n * Return list of decoration IDs per character\n *\n * @param {ContentBlock}\n * @return {List<String>}\n */\n\n\nPrismDecorator.prototype.getDecorations = function (block) {\n  var tokens,\n      token,\n      tokenId,\n      resultId,\n      offset = 0,\n      tokenCount = 0;\n  var filter = this.options.get('filter');\n  var getSyntax = this.options.get('getSyntax');\n  var blockKey = block.getKey();\n  var blockText = block.getText();\n  var decorations = Array(blockText.length).fill(null);\n  var Prism = this.options.get('prism');\n  var highlighted = this.highlighted;\n  highlighted[blockKey] = {};\n\n  if (!filter(block)) {\n    return Immutable.List(decorations);\n  }\n\n  var syntax = getSyntax(block) || this.options.get('defaultSyntax'); // Allow for no syntax highlighting\n\n  if (syntax == null) {\n    return Immutable.List(decorations);\n  } // Parse text using Prism\n\n\n  var grammar = Prism.languages[syntax];\n  tokens = Prism.tokenize(blockText, grammar);\n\n  function processToken(decorations, token, offset) {\n    if (typeof token === 'string') {\n      return;\n    } //First write this tokens full length\n\n\n    tokenId = 'tok' + tokenCount++;\n    resultId = blockKey + '-' + tokenId;\n    highlighted[blockKey][tokenId] = token;\n    occupySlice(decorations, offset, offset + token.length, resultId); //Then recurse through the child tokens, overwriting the parent\n\n    var childOffset = offset;\n\n    for (var i = 0; i < token.content.length; i++) {\n      var childToken = token.content[i];\n      processToken(decorations, childToken, childOffset);\n      childOffset += childToken.length;\n    }\n  }\n\n  for (var i = 0; i < tokens.length; i++) {\n    token = tokens[i];\n    processToken(decorations, token, offset);\n    offset += token.length;\n  }\n\n  return Immutable.List(decorations);\n};\n/**\n * Return component to render a decoration\n *\n * @param {String}\n * @return {Function}\n */\n\n\nPrismDecorator.prototype.getComponentForKey = function (key) {\n  return this.options.get('render');\n};\n/**\n * Return props to render a decoration\n *\n * @param {String}\n * @return {Object}\n */\n\n\nPrismDecorator.prototype.getPropsForKey = function (key) {\n  var parts = key.split('-');\n  var blockKey = parts[0];\n  var tokId = parts[1];\n  var token = this.highlighted[blockKey][tokId];\n  return {\n    type: token.type\n  };\n};\n\nfunction occupySlice(targetArr, start, end, componentKey) {\n  for (var ii = start; ii < end; ii++) {\n    targetArr[ii] = componentKey;\n  }\n}\n\nmodule.exports = PrismDecorator;","map":null,"metadata":{},"sourceType":"script"}