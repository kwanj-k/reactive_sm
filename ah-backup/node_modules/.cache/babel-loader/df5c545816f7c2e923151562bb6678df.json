{"ast":null,"code":"import _defineProperty from \"/Users/kwanj-k/sims/ah-the-unsullied-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/kwanj-k/sims/ah-the-unsullied-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kwanj-k/sims/ah-the-unsullied-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kwanj-k/sims/ah-the-unsullied-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kwanj-k/sims/ah-the-unsullied-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kwanj-k/sims/ah-the-unsullied-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kwanj-k/sims/ah-the-unsullied-frontend/src/components/articles/createArticle/index.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport TagsInput from 'react-tagsinput';\nimport 'react-tagsinput/react-tagsinput.css';\nimport { ImageBlockConfig } from 'Dante2/package/es/components/blocks/image';\nimport { Button } from 'react-materialize';\nimport Dante from 'Dante2';\nimport { saveArticle } from '../../../actions/createArticleActions';\nimport imageUploader from '../../../utils/ImageUploader';\nimport upload from '../../../utils/ImageUploader';\n\nvar CreateArticle =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CreateArticle, _Component);\n\n  function CreateArticle() {\n    var _this;\n\n    _classCallCheck(this, CreateArticle);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CreateArticle).call(this));\n\n    _this.getEditorContent = function () {\n      return _this.editor.emitSerializedOutput();\n    };\n\n    _this.titleDescriptionChange = function (e) {\n      _this.setState(_defineProperty({}, e.target.id, e.target.value));\n    };\n\n    _this.file = function (e) {\n      console.log(e.target.value);\n      imageUploader({\n        image: e.target.value\n      }).then(function (res) {\n        console.log(res);\n\n        _this.setState({\n          image: res.data.secure_url\n        });\n      });\n    };\n\n    _this.bodyOnChange = function (state) {\n      _this.editor = state;\n\n      var _this$getEditorConten = _this.getEditorContent(),\n          blocks = _this$getEditorConten.blocks;\n\n      for (var i = 0; i < blocks.length; i += 1) {\n        var block = blocks[i];\n\n        if (block.type === 'image') {\n          console.log(block.data.url.slice(5));\n          imageUploader({\n            image: block.data.url.slice(5)\n          }).then(function (res) {\n            //console.log(res)\n            _this.setState({\n              image: res.data.secure_url\n            });\n          });\n        }\n\n        ;\n      } //console.log(blocks)\n\n    };\n\n    _this.handleUpload = function (file, state) {\n      console.log;\n      upload({\n        body: file,\n        progress: function progress(e) {\n          state.updateProgressBar(e);\n        }\n      }).then(function (data) {\n        state.uploadCompleted(data.secure_url);\n      });\n    };\n\n    _this.state = {\n      title: '',\n      description: '',\n      body: '',\n      tags: [],\n      image: ''\n    };\n    return _this;\n  }\n\n  _createClass(CreateArticle, [{\n    key: \"handleTagChange\",\n    value: function handleTagChange(tags) {\n      this.setState({\n        tags: tags\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //console.log(this.state)\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"title\",\n        onChange: this.titleDescriptionChange,\n        type: \"text\",\n        placeholder: \"Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        id: \"description\",\n        onChange: this.titleDescriptionChange,\n        type: \"text\",\n        placeholder: \"Description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), React.createElement(Dante, {\n        content: null,\n        widgets: [ImageBlockConfig({\n          options: {\n            upload_url: 'https://api.cloudinary.com/v1_1/dadrqjrpw/image/upload',\n            upload_callback: this.handleUpload,\n            upload_handler: this.handleUpload\n          }\n        })],\n        onChange: this.bodyOnChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(TagsInput, {\n        value: this.state.tags,\n        onChange: this.handleTagChange.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClick: this.publishArticle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"PUBLISH\"));\n    }\n  }]);\n\n  return CreateArticle;\n}(Component); // CreateArticle.propTypes = {\n//     saveArticle: PropTypes.func.isRequired,\n//     //errors: PropTypes.object.isRequired,\n//     //editorState: PropTypes.shape({}),\n//   };\n// CreateArticle.defaultProps = {\n//     editorState: PropTypes.shape({}),\n// }\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    article: state.article,\n    errors: state.errors\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, {\n  saveArticle: saveArticle\n})(CreateArticle));","map":{"version":3,"sources":["/Users/kwanj-k/sims/ah-the-unsullied-frontend/src/components/articles/createArticle/index.js"],"names":["React","Component","connect","withRouter","TagsInput","ImageBlockConfig","Button","Dante","saveArticle","imageUploader","upload","CreateArticle","getEditorContent","editor","emitSerializedOutput","titleDescriptionChange","e","setState","target","id","value","file","console","log","image","then","res","data","secure_url","bodyOnChange","state","blocks","i","length","block","type","url","slice","handleUpload","body","progress","updateProgressBar","uploadCompleted","title","description","tags","options","upload_url","upload_callback","upload_handler","handleTagChange","bind","publishArticle","mapStateToProps","article","errors"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport TagsInput from 'react-tagsinput';\nimport 'react-tagsinput/react-tagsinput.css'\nimport { ImageBlockConfig } from 'Dante2/package/es/components/blocks/image';\nimport { Button } from 'react-materialize';\nimport Dante from 'Dante2';\nimport { saveArticle } from '../../../actions/createArticleActions';\nimport imageUploader from '../../../utils/ImageUploader';\nimport upload from '../../../utils/ImageUploader';\n\n\n\nclass CreateArticle extends Component {\n    constructor() {\n        super();\n        this.state = {\n        title: '',\n        description: '',\n        body: '',\n        tags: [],\n        image: '',\n        }\n    }   \n\n    getEditorContent = () => this.editor.emitSerializedOutput();\n\n    handleTagChange(tags) {\n        this.setState({tags})\n    }\n    titleDescriptionChange = e => {\n        this.setState({ [e.target.id]: e.target.value });\n      };\n    file = e => {\n        console.log(e.target.value)\n        imageUploader({ image: e.target.value }).then((res) =>{\n            console.log(res)\n            this.setState({\n              image: res.data.secure_url\n            })\n        })\n    }\n\n    bodyOnChange = (state) => {\n        this.editor = state;\n        const { blocks } = this.getEditorContent()\n        for (let i = 0; i < blocks.length; i += 1) {\n            const block = blocks[i];\n            if (block.type === 'image') {\n                console.log(block.data.url.slice(5,))\n                imageUploader({ image: block.data.url.slice(5,) }).then((res) =>{\n                    //console.log(res)\n                    this.setState({\n                      image: res.data.secure_url\n                    })\n                }\n                  );\n            };\n        }\n\n        //console.log(blocks)\n    }\n    handleUpload = (file, state) => {\n        console.log\n        upload({\n          body: file,\n          progress: (e) => {\n            state.updateProgressBar(e);\n          },\n        })\n          .then((data) => {\n            state.uploadCompleted(data.secure_url);\n          });\n      };\n  \n\n\n\n  render() {\n    //console.log(this.state)\n    return (\n    \n      <div >\n        <input\n            id= 'title'\n            onChange={this.titleDescriptionChange}\n            type='text' \n            placeholder='Title'/>\n        <input\n            id= 'description'\n            onChange={this.titleDescriptionChange}\n            type='text' placeholder='Description'/>\n        <Dante\n            content={null}\n            widgets={[ImageBlockConfig({\n                options: {\n                    upload_url: 'https://api.cloudinary.com/v1_1/dadrqjrpw/image/upload',\n                    upload_callback: this.handleUpload,\n                    upload_handler: this.handleUpload,\n\n\n                }\n            })]}\n            onChange={this.bodyOnChange}\n          \n        />\n\n        <TagsInput value={this.state.tags} onChange={ this.handleTagChange.bind(this)} />\n        <Button onClick={ this.publishArticle}>PUBLISH</Button>\n      </div>\n    );\n  }\n}\n\n// CreateArticle.propTypes = {\n//     saveArticle: PropTypes.func.isRequired,\n//     //errors: PropTypes.object.isRequired,\n//     //editorState: PropTypes.shape({}),\n//   };\n// CreateArticle.defaultProps = {\n//     editorState: PropTypes.shape({}),\n// }\nconst mapStateToProps = state => ({\n    article: state.article,\n    errors: state.errors\n  });\n\n  export default withRouter(\n    connect(\n      mapStateToProps,\n      { saveArticle }\n    )(CreateArticle)\n  );\n"]},"metadata":{},"sourceType":"module"}